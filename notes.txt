~ Important things to know about HTML email development. ~

#1 - Web Dev and HTML Dev Differ
Though it is imperative to understand HTML and CSS in order to develop an HTML email, it is important to understand that it is different than web development.
There are no real, consistent standards when it comes to email development, and many of the HTML tags you might be accustomed to using in web development are not supported in HTML email development.
This is due to security standards and each email client (Gmail, Yahoo, Outlook, etc) will handle things a bit differently.
This project will use nested tables:

<table>
<tr>
<td></td>
</tr>
</table>

#2 - Styling CSS
Security does not allow for ANY external files.
This includes images and external stylesheets. 
- Styling needs to be handled by either internal styles, or by inline styles.
- Images need to be hosted online and you will need to link them.
- You can only apply ONE CLASS PER element, multiple classes are not supported.
- You CANNOT use shorthand for CSS styles in HTML as they are not supported.
For this project, inline styles will be used with any classes used in an internal style sheet.
The internal style sheet will be pulled inline by the ESP (Email Service Provider) at the end.

#3 - !DOCTYPE, <html>, and <meta>
- HTML emails use XHTML Transitional 1.0 as the document type as it is the most compatible document type across email clients.
- Add xmls="http://www.w3.org/1999/xhtml" to the opening html tag.
- Adding http-equiv="Content-Type" content="text/html" to the meta tag with charset="UTF-8" tells the destination rendering engine how to process text and special characters for HTML emails. 
You should encode any special characters anyway.

#4 - Suggested workflow
Do NOT build out the whole project and test it at the end.
It leads to searching for numerous bugs, and adds a lot of unnecessary time to delivery.
- Work structurally first.
Build the structure first and then test it.
- Leave in all the table borders, and use background colors for certain cells, then remove them at the end.
This allows for more easily seeing what is being created and how it's working.
- Make sure it's functional and accessible before you start adding/enhancing.
- Test and use a Validator often.
Work until you reach a minor development milestone, then run a test.
Using a validator will help catch mistakes and iron out details.

This is the workflow that will be followed for this project:
- Create the structure (skeleton), then test.
- Add content, then test.
- Style colors and fonts, then test.
- Remove any borders and backgrounds used for visual aid in development, then test.
- Review, send test email to self.
- Follow up with any needed changes.

#5 - Tips and things to look out for
 Each email client will handle things differently and will have their own default presets.
 - AVOID leaving anything up to the email client.
 Specify all of your widths.
 For main container elements, set the size in px, then use % inside the containing element as needed.
 - AVOID using a <main> tag.
 Many ESP's will already have it when you use them, and this could cause there to be 2 mains tags.
 - Accessibility
Be attentive to text size, contrast, descriptive text, and alt text.
Add the role attribute to each <table> element and assign the role to either presentation or none.

~ Tools and resources ~

- Validator: https://validator.w3.org/
- Litmus PutsMail: https://www.putsmail.com/
- A free online image hosting site - imbb: https://imgbb.com/
- Entity Code Cheat Sheet: https://entitycode.com/
* Image compression tools*
- JPEGmini: https://www.jpegmini.com/
- tinyPNG: https://tinypng.com/
